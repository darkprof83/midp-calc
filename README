This document is not finished yet by far

Building
========

Let me start by saying that one of the first tasks for those that don't fancy
the Makefile approach should be to make a more general building process that
enables building under IDE's and/or under other operating systems. The new
building process should preferrably encompass all that is achieved in the
current Makefile.

The Makefile and build.xms Ant script enables compilation under Linux. To make
this Makefile work without modification you need to set up your system
accordingly:

1) You need a GNU Compiler package containing make (or gmake), gcc, gcj and
   cpp. You can use javac instead of gcj by modifying the Makefile, but it is
   much slower.

2) You need J2SE SDK from http://java.sun.com. $JAVA_HOME should should be set
   to the location of the SDK, and $JAVA_HOME/bin should be added to the path.

3) You need J2ME Wireless Toolkit version 1.04 (not 2.0) from
   http://java.sun.com, installed in ../../WTK104 relative to this file.

4) You need Apache Ant installed, from http://ant.apache.org.
   $ANT_HOME should be set to the location of Ant, and $ANT_HOME/bin
   should be added to the path.

5) You need the ProGuard obfuscator from http://proguard.sourceforge.net.
   The library file proguardXXX/lib/proguard-X.X.jar must be available to
   Ant, and could for convenience be placed in ../../WTK104/lib or
   $ANT_HOME/lib.

6) You need the Antenna Ant task package from
   http://antenna.sourceforge.net. The library file, antenna-bin-XXX.jar 
   must be available to Ant, and could for convenience be placed in
   ../../WTK104/lib or $ANT_HOME/lib.


7) The project depends on Real.java from
   http://sourceforge.net/projects/real-java. If you simply want to download
   the file, the file should be placed in a directory named "real-java" on the
   same level as the midp-calc directory, i.e. ../real-java/Real.java relative
   to this file.  Alternatively, to check out the real-java project with
   anonymous CVS from sourceforge, do the following:

     $ cd ..              # i.e. get to the directory containing midp-calc
     $ cvs -d:pserver:anonymous@cvs.sf.net:/cvsroot/real-java co real-java

At this point, you should be able to compile the project by executing the
command:

     $ make


Development Guidelines
======================

If you want to contribute to the development, I want you to consider the
following guidelines first:

1) Make it compact: Many phones and also many WAP gateways have a limit of
   64kB for the jar file containing an application.

2) Make the least impact on the code: Unless there is a very good reason for
   it, do not change or refactor large portions of the code simultaneously.

3) Don't break compatibility: If you are making a fix to get the program
   running on a different hardware, make sure that the code still works on
   all the hardware that it is already working on, and not just the new
   hardware.

4) Don't change indenting: I use a BSD-like brace style with 2 spaces of
   indentation for subblocks. Under no circumstances change the indentation or
   brace style of large portions of the code using your own prefferred
   indentation. Under no circumstances insert TAB characters in the code or
   replace all occurrances of X consecutive spaces with one TAB.

5) Always do "cvs diff <file>" before committing. You need to see what you
   have done to be able to make a good commit comment. If you accidently
   changed indentation, inserted TAB's or switched CR/LF mode on the entire
   file it will show in the diff and you may be able to save face in time.
   The goal should be to make as small a diff as possible.


Regards,
Roar Lauritzsen
