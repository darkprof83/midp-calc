Setting up the Eclipse IDE build environment:
=============================================

Prerequisites:
--------------

Install Java J2SE JDK >= 1.5.0_07
Install WTK 1         >= 1.04           (for MIDP1 version)
Install WTK 2         >= 2.2            (for MIDP2 version)
Install WTK Nokia Series 40             (for Nokia version)
Install Antenna       >= 0.9.14
Install Proguard      >= 3.6
Install Eclipse       >= 3.2.0

It might work with earlier versions than those listed, but at least
the listed versions worked for me. Eclipse MUST be version 3.2.0 or
higher. If you are not planning to compile all of the MIDP1, MIDP2 and
Nokia versions, the corresponding WTK can be omitted.

The JDK "bin" directory must be in the command path, specifically the
"jar" command.


Installing derived files:
-------------------------

Some files necessary for compiling this project can only be generated
from the "Makefile build environment" (described later in this document).
If you are unable to generate these files, there is a compressed tar
archive named "derived.tgz" containing the derived files. It is important
that this archive is extracted into the same directory as the archive
itself is located in, so that the extracted files end up in the correct
subdirectories. In Windows, this can be achieved by running an archiving
program such as WinZip. In Linux, you can use the following command:

    $ tar zxf derived.tgz


Starting Eclipse:
-----------------

Now, start Eclipse. The following descriptions refer to Eclipse menus
and dialogs. When referring to <this directory>, I mean the main
project directory, the one containing this file. An important point
(especially if you are installing in Windows) is that this directory
should not contain spaces, so it cannot be located in e.g. "Documents
and Settings".


Optionally create a new Eclipse workspace:
------------------------------------------

(Useful if you are working with other projects with Eclipse.)

File > Switch Workspace...
  Workspace: [<this directory>/.eclipse]                    (e.g.)
  click [OK]
  click [Workbench]


Settings path variables before importing the projects:
------------------------------------------------------

Window > Preferences...
  General > Workspace > Linked Resources
    click [New...]
      Name:     [MAIN               ]
      Location: [<this directory>   ]
      click [OK]
  Java > Build Path > Classpath Variables
    click [New...]
      Name:     [WTK_1              ]
      Path:     [<path to WTK 1>    ]
      click [OK]
    click [New...]
      Name:     [WTK_2              ]
      Path:     [<path to WTK 2>    ]
      click [OK]
    click [New...]
      Name:     [WTK_N              ]
      Path:     [<path to WTK Nokia>]
      click [OK]
  click [OK]

(The <path to WTK Nokia> is the directory in the Nokia WTK containing
the subdirectories "lib" and "bin". In my case this was a directory
named ".../Devices/Nokia_Series_40_MIDP_Concept_SDK_Beta_0_3")


Importing projects:
-------------------

(For some reason, it does not work for me to import the CalcApplet
project in the first import, so I have to import it separately, after
the others.)

File > Import...
  General > Existing Projects into Workspace
  click [Next]
  (*) Select root directory: [<this directory>]
  Projects:
    [x] Calc                            (the MIDP1 version)
    [ ] CalcApplet                      (the Applet demo application)
    [x] CalcMIDP2                       (the MIDP2 version)
    [x] CalcNokia                       (the Nokia version)
  click [Finish]
File > Import...
  General > Existing Projects into Workspace
  click [Next]
  (*) Select root directory: [<this directory>]
  Projects:
    [x] CalcApplet
  click [Finish]

All projects are using the same "main" source directory, so warnings
and errors will be listed four times each unless you set up a filter
(using the small, inconspicuous button with three arrows on it).

(Some times, you can get error messages (and a small red cross) on the
"main" source directory. In that case, simply delete the project,
check the MAIN path variable, and try to import the project again.)


Setting up and executing the Ant build tasks:
---------------------------------------------

Calc.jar:

Package Explorer > Calc > build.xml, right click, Run As > Ant Build...
  Classpath tab, select "User Entries", click [Add External JARs]
    find and add your Antenna jar, e.g. antenna-bin-0.9.14.jar
    find and add your Proguard jar, e.g. proguard-3.6.jar
  Properties tab
    uncheck "Use global properties as specified in the Ant runtime preferences"
    click [Add Property]
      Name:     [wtk.home           ]
      Value:    [<path to WTK 1>    ]
  click [Run]

After the Ant build tasks have been set up, you can run them directly
with Run As > Ant Build.


CalcMIDP2.jar:

Package Explorer > CalcMIDP2 > build.xml, right click, Run As > Ant Build...
  Classpath tab, select "User Entries", click [Add External JARs]
    find and add your Antenna jar, e.g. antenna-bin-0.9.14.jar
    find and add your Proguard jar, e.g. proguard-3.6.jar
  Properties tab
    uncheck "Use global properties as specified in the Ant runtime preferences"
    click [Add Property]
      Name:     [wtk.home           ]
      Value:    [<path to WTK 2>    ]
  click [Run]


CalcNokia.jar:

Package Explorer > CalcNokia > build.xml, right click, Run As > Ant Build...
  Classpath tab, select "User Entries", click [Add External JARs]
    find and add your Antenna jar, e.g. antenna-bin-0.9.14.jar
    find and add your Proguard jar, e.g. proguard-3.6.jar
  Properties tab
    uncheck "Use global properties as specified in the Ant runtime preferences"
    click [Add Property]
      Name:     [wtk.home           ]
      Value:    [<path to WTK Nokia>]
  click [Run]


CalcApplet.jar:

Package Explorer > CalcApplet > build.xml, right click, Run As > Ant Build
  (should work directly if there are no other errors)


CalcApplet.jar, running:

Package Explorer > CalcApplet > CalcApplet.html, right click, Run As > Run...
  Double-click "Java Applet"
  Classpath tab, select "User Entries", click [Add External JARs]
    find and add "<this directory>/applet/target/CalcApplet.jar"
    select the CalcApplet.jar and move it to the top of "User Entries"
  Applet: [midpcalc.CalcApplet]
  click [Run]



Setting up the Makefile build environment:
==========================================

Prerequisites:
--------------

TBD.


Building:
---------

TBD.


from old file:

Building
========

Let me start by saying that one of the first tasks for those that don't fancy
the Makefile approach should be to make a more general building process that
enables building under IDE's and/or under other operating systems. The new
building process should preferrably encompass all that is achieved in the
current Makefile.

The Makefile and build.xml Ant script enables compilation under Linux. To make
this Makefile work without modification you need to set up your system
accordingly:

1) You need a GNU Compiler package containing make (or gmake), gcc, gcj and
   cpp. You can use javac instead of gcj by modifying the Makefile, but it is
   much slower.

2) You need J2SE SDK from http://java.sun.com. $JAVA_HOME should should be set
   to the location of the SDK, and $JAVA_HOME/bin should be added to the path.

3) You need J2ME Wireless Toolkit version 1.04 from
   http://java.sun.com, installed in ../../WTK104 relative to this file.

3b) You need J2ME Wireless Toolkit version 2.2 from
   http://java.sun.com, installed in ../../WTK2.2 relative to this file.

3c) You need Nokia Wireless Toolkit version 2.2 (not 2.0) installed in
   ../../Nokia/Devices/xxx relative to this file. Modify the WTK_N variable in
   Makefile accordingly.

4) You need Apache Ant installed, from http://ant.apache.org. $ANT_HOME should
   be set to the location of Ant, and $ANT_HOME/bin should be added to the
   path.

5) You need the ProGuard obfuscator from http://proguard.sourceforge.net. The
   library file proguardXXX/lib/proguard-X.X.jar must be available to Ant, and
   could for convenience be placed in ../../WTK104/lib or $ANT_HOME/lib.

6) You need the Antenna Ant task package from
   http://antenna.sourceforge.net. The library file, antenna-bin-XXX.jar must
   be available to Ant, and could for convenience be placed in
   ../../WTK104/lib or $ANT_HOME/lib.


7) The project depends on Real.jpp from
   http://sourceforge.net/projects/real-java. If you simply want to download
   the file, the file should be placed in a directory named "real-java" on the
   same level as the midp-calc directory, i.e. ../real-java/Real.jpp relative
   to this file.  Alternatively, to check out the real-java project with
   anonymous CVS from sourceforge, do the following:

     $ cd ..              # i.e. get to the directory containing midp-calc
     $ cvs -d:pserver:anonymous@cvs.sf.net:/cvsroot/real-java co real-java

At this point, you should be able to compile the project by executing the
command:

     $ make

When all else fails -- you're not on Linux and you don't have access to a GNU
compiler package, and there is no concievable way of generating the files
Real.java, GFontBase.java and Calc.jad, there is a compressed tar file named
"derived.tgz" containing these files. The contents of this archive may not be
up to date, and you should of course not _modify_ these files and commit them
back into CVS, unless you have changed the files that the archive depends on
and are updating the archive. The files are included in the archive as a last
resort or a temporary solution until you have things set up.



Development Guidelines
======================

If you want to contribute to the development, I want you to consider the
following guidelines first:

1) Make it compact: Many phones and also many WAP gateways have a limit of
   64kB for the jar file containing an application. (After version 3.00, 
   we don't care any more.)

2) Make the least impact on the code: Unless there is a very good reason for
   it, do not change or refactor large portions of the code simultaneously.
   Exempt from this rule are large changes that actually decrease the size of
   the application, and code changes that do not change the compiled result,
   such as adding comments and renaming identifiers to increase clarity.

3) Don't break compatibility: If you are making a fix to get the program
   running on a different hardware, make sure that the code still works on all
   the hardware that it is already working on, and not just the new hardware.

4) Don't change indenting: I use a BSD-like brace style with 2 spaces of
   indentation for subblocks. Under no circumstances change the indentation or
   brace style of large portions of the code using your own prefferred
   indentation. Under no circumstances insert TAB characters in the code or
   replace all occurrances of X consecutive spaces with one TAB.

5) LEARN CVS. CVS is a useful tool that enables several people to develop on
   the same project simultaneously. If you are a member of the delveoper team,
   your contribution will only be accepted in the form of CVS commits, so
   learn how to use it. The most important rule to avoid confusion: Only
   modify files in a CVS controlled directory, never take files out of the CVS
   directory to modify them.

6) Always do "cvs diff <file>" before committing. You need to see what you
   have done to be able to make a good commit comment. If you accidently
   changed indentation, inserted TAB's or switched CR/LF mode on the entire
   file it will show in the diff and you may be able to save face in time.
   The goal should be to make as small a diff as possible.


Regards,
Roar Lauritzsen
